/* This file's format is text & PARI/GP code.
 * (The appropriate ending, ".gp", is unfortunately misinterpreted as "gnuplot",
 *  whiche causes weird mformatting when displayed on github.)
 */
From ~~~~: (Start)
a(2k+1) = 7 iff k == 1 (mod 3), else 11. [Making the 2008 formula more precise.]
a(4k+2) = 29 iff k == 3 (mod 7), else = 61 if k == 7 (mod 15), else = 89 if k == 5 (mod 11), else 101.
a(8k+4) = 73 for all k >= 0.
a(16k+8) = 17 for all k >= 0.
a(32k+16) = 97 iff k==1 (mod 3), else 353.
a(64k+32) = 193 iff k==1 (mod 3), else 1217 if k==9 (mod 19), else 2753 if k==21 (mod 43),
      else 3137 if k==24 (mod 49), else 3329 if k==6 (mod 13), else 4481 if k==17 (mod 35),
      else 4673 if k==36 (mod 73), else 5953 if k==15 (mod 31), else 6529 if k==8 (mod 17),
      else 13633 if k==35 (mod 71), else 15937 if k==41 (mod 83), else 19841. (End)

/*** implement & check this formula ***
 *
 * Note: as in the formula, the smallest *results* must be checked first,
 * because we're searching the *smallest* prime factor.
 *
 * The following list corresponds to exponents which are odd multiples of 32.
 * It lists alternatingly the result a(n) and the corresponding residue of the
 * parameter k in the exponent n = 64*k + 32.
 * (Note that, as for all other cases (2k+1, 4k+2, ...), all residues are of the form Mod(r, 2r+1),
 *  so we could just list the residue r or the modulus 2r+1, without losing any information.)
 */
{L32 = [193, Mod( 1,  3),  1217, Mod( 9, 19),  2753, Mod(21, 43),  3137, Mod(24, 49),
       3329, Mod( 6, 13),  4481, Mod(17, 35),  4673, Mod(36, 73),  5953, Mod(15, 31),
       6529, Mod( 8, 17), 13633, Mod(35, 71), 15937, Mod(41, 83), 19841]} \\ Mod(0,1)

/* This function r(k) returns the result as "predicted by the list L".
 * The list should end with Mod(0,1) or with the default value. */
r(k, L=L32)=forstep(i=2, #L, 2, k==L[i] && return(L[i-1])); L[#L]

/* return the first k for which the formula would not be correct,
 * for n odd multiple of m, using n = (2k+1)m, k=start..LIM,
 * and the list L = Lm (by default).
 */
{chk(m=32,LIM=10^5,start=1,L=eval(Str("L"m)))=
 for(k=start, LIM, Mod(10,r(k,L))^(64*k+32)==1 && return(k))}

/* chk(32,10^5) ==> no result ==> check OK! */


/*
 * How did we find this?
 * (... to be developed ...)
 */

/* below some code for experiments */

/* smallest prime factor -- poor man's version, better see oeis.org/A038371 */
spf(n) = A038371(n) = factor(n,0)[1,1]

[factor(10^(64*k+32)+1,0)[1,1]|k<-[0..40]]
%99 = [19841, 193, 19841, 19841, 193, 19841, 3329, 193, 6529, 1217, 193, 19841, 19841, 193, 19841, 5953, 193, 4481, 19841, 193, 19841, 2753, 193, 19841, 3137, 193, 19841, 19841, 193, 19841, 19841, 193, 3329, 19841, 193, 13633, 4673, 193, 19841, 19841, 193]

vecsort([[factor(10^(64*k+32)+1,0)[1,1],k]|k<-[0..50]])
%100 = [[193, 1], [193, 4], [193, 7], [193, 10], [193, 13], [193, 16], [193, 19], [193, 22], [193, 25], [193, 28], [193, 31], [193, 34], [193, 37], [193, 40], [193, 43], [193, 46], [193, 49], [1217, 9], [1217, 47], [2753, 21], [3137, 24], [3329, 6], [3329, 32], [3329, 45], [4481, 17], [4673, 36], [5953, 15], [6529, 8], [6529, 42], [13633, 35], [15937, 41], [19841, 0], [19841, 2], [19841, 3], [19841, 5], [19841, 11], [19841, 12], [19841, 14], [19841, 18], [19841, 20], [19841, 23], [19841, 26], [19841, 27], [19841, 29], [19841, 30], [19841, 33], [19841, 38], [19841, 39], [19841, 44], [19841, 48], [19841, 50]]

/* function to check that 10^k+1 is divisible by m
 */
ff(k,m)=Mod(10,m)^k+1

\\ Example:
ff((9+38/2)*64+32, 1217)  \\  %103 = Mod(0, 1217)

[ff((9+17*k)*64+32, 1217)|k<-[0..9]]
%105 = [Mod(0, 1217), Mod(740, 1217), Mod(313, 1217), Mod(663, 1217), Mod(17, 1217), Mod(347, 1217), Mod(1094, 1217), Mod(362, 1217), Mod(962, 1217), Mod(550, 1217)]

[ff( (9 + 19*k)*64+32, 1217) | k<-[0..9]]
%106 = [Mod(0, 1217), Mod(0, 1217), Mod(0, 1217), Mod(0, 1217), Mod(0, 1217), Mod(0, 1217), Mod(0, 1217), Mod(0, 1217), Mod(0, 1217), Mod(0, 1217)]

[ff( (6 + 13*k)*64+32, 1217) | k<-[0..9]]
%107 = [Mod(310, 1217), Mod(1116, 1217), Mod(590, 1217), Mod(740, 1217), Mod(17, 1217), Mod(362, 1217), Mod(768, 1217), Mod(953, 1217), Mod(183, 1217), Mod(0, 1217)]

[ff( (6 + 13*k)*64+32, 3329) | k<-[0..9]]
%108 = [Mod(0, 3329), Mod(0, 3329), Mod(0, 3329), Mod(0, 3329), Mod(0, 3329), Mod(0, 3329), Mod(0, 3329), Mod(0, 3329), Mod(0, 3329), Mod(0, 3329)]

[ff( (8 + 34/2*k)*64+32, 6529) | k<-[0..9]]
%110 = [Mod(0, 6529), Mod(0, 6529), Mod(0, 6529), Mod(0, 6529), Mod(0, 6529), Mod(0, 6529), Mod(0, 6529), Mod(0, 6529), Mod(0, 6529), Mod(0, 6529)]

/* function to find the modulus in the exponent: 
 * @param p = polynomial of the form a0 + a1*x
 * @param m = modulus for the 
 * @return [t, 10^(a0 + 2*t) + 1 (mod m)] ; where t is such that (hopefully) 10^(a0 + a1*k*t)==1 (mod m) for all k >= 0
 */
fn(p, m)=for(t=1,999, ff( subst(p,'x,t),m) || return([t, ff(subst(p,'x,2*t),m)]))
%114 = (p,m)->for(t=1,999,ff(subst(p,'x,t),m)||return([t,ff(subst(p,'x,2*t),m)]))

fn( (21 + 'x)*64+32, 2753)
%115 = [43, Mod(0, 2753)]
\\ Verification:
[ff( (21 + 43*k)*64+32, 2753) | k<-[0..9]]
%117 = [Mod(0, 2753), Mod(0, 2753), Mod(0, 2753), Mod(0, 2753), Mod(0, 2753), Mod(0, 2753), Mod(0, 2753), Mod(0, 2753), Mod(0, 2753), Mod(0, 2753)]

fn( (24 + 'x)*64+32, 3137)
%116 = [49, Mod(0, 3137)]
\\ Verification:
[ff( (24 + 49*k)*64+32, 3137) | k<-[0..9]]
%119 = [Mod(0, 3137), Mod(0, 3137), Mod(0, 3137), Mod(0, 3137), Mod(0, 3137), Mod(0, 3137), Mod(0, 3137), Mod(0, 3137), Mod(0, 3137), Mod(0, 3137)]

fn( (17 + 'x)*64+32, 4481)
%120 = [35, Mod(0, 4481)]
\\ Verification:
[ff( (17 + 35*k)*64+32, 4481) | k<-[0..9]]
%121 = [Mod(0, 4481), Mod(0, 4481), Mod(0, 4481), Mod(0, 4481), Mod(0, 4481), Mod(0, 4481), Mod(0, 4481), Mod(0, 4481), Mod(0, 4481), Mod(0, 4481)]


fn( ( 36 + 'x)*64+32, 4673 )
%122 = [73, Mod(0, 4673)]
\\ Verification:
[ff(( 36 + 73*k)*64+32, 4673 ) | k<-[0..9]]
%125 = [Mod(0, 4673), Mod(0, 4673), Mod(0, 4673), Mod(0, 4673), Mod(0, 4673), Mod(0, 4673), Mod(0, 4673), Mod(0, 4673), Mod(0, 4673), Mod(0, 4673)]

fn( ( 15 + 'x)*64+32, 5953 )
%123 = [31, Mod(0, 5953)]
\\ Verification:
[ff( (15 + 31*k)*64+32, 5953 ) | k<-[0..9]]
%124 = [Mod(0, 5953), Mod(0, 5953), Mod(0, 5953), Mod(0, 5953), Mod(0, 5953), Mod(0, 5953), Mod(0, 5953), Mod(0, 5953), Mod(0, 5953), Mod(0, 5953)]

fn( ( 35 + 'x)*64+32, 13633 )
%126 = [71, Mod(0, 13633)]

fn( ( 41 + 'x)*64+32, 15937 )
%127 = [83, Mod(0, 15937)]
